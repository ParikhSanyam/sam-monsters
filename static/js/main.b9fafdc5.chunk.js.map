{"version":3,"sources":["components/card/card.jsx","components/card-lists/card-lists.jsx","components/search-box/search-box.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","toLocaleLowerCase","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAGaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,WAAWC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACvB,mCAAML,EAAMI,QAAQE,KAApB,OACA,kCAAKN,EAAMI,QAAQG,MAAnB,WCHKC,EAAW,SAAAR,GAAK,OACzB,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCJlBM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACIZ,UAAY,cACZa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCmCHG,G,wDArCb,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXR,SAAS,GACTS,YAAa,IAJJ,E,qDAQb,WAAqB,IAAD,OAClBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAEf,SAAWc,S,oBAG5C,WAAS,IAAD,OACN,EAAgCE,KAAKR,MAA9BR,EAAP,EAAOA,SAAUS,EAAjB,EAAiBA,YACXQ,EAAmBjB,EAASkB,QAAO,SAAAvB,GAAO,OAAIA,EAAQE,KAAKsB,cAAcC,SAASX,EAAYY,wBACpG,OACE,sBAAK7B,UAAU,MAAf,UAMI,oBAAIA,UAAU,OAAd,8BACA,cAAC,EAAD,CACEW,YAAY,iBACZC,aAAc,SAAAkB,GAAC,OAAI,EAAKP,SAAS,CAAEN,YAAaa,EAAEC,OAAOC,WAG7D,cAAC,EAAD,CAAUxB,SAAUiB,W,GA/BVQ,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b9fafdc5.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.css';\r\n\r\nexport const Card = props => (\r\n    <div className=\"card-container\">\r\n        <img alt=\"monsters\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n        <h1> {props.monster.name} </h1>\r\n        <p> {props.monster.email} </p>\r\n    </div>\r\n);\r\n","import React from 'react';\r\nimport './card-lists.css';\r\nimport { Card } from '../card/card';\r\n\r\nexport const CardList = props => (\r\n    <div className=\"card-list\">\r\n        {props.monsters.map(monster => (\r\n            <Card key={monster.id} monster={monster}/>\r\n          ))}\r\n    </div>\r\n);","import React from \"react\";\r\nimport './search-box.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) =>(\r\n    <input \r\n        className = \"searchInput\"\r\n        type='search' \r\n        placeholder={placeholder} \r\n        onChange={handleChange}\r\n    /> \r\n);\r\n{/* console.log(e.target.value) */}","import React, {Component} from 'react';\nimport { CardList } from './components/card-lists/card-lists';\nimport { SearchBox } from './components/search-box/search-box';\nimport './App.css';\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = {\n      monsters:[],\n      searchField: ''\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({ monsters : users}));\n  }\n\n  render(){\n    const {monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLocaleLowerCase()))\n    return (\n      <div className=\"App\">\n        {/* <input \n          type='search' \n          placeholder='Search Monster' \n          onChange={e => this.setState({ searchField: e.target.value })}\n          />  */}\n          <h1 className=\"head\">Relodex Monsters</h1>\n          <SearchBox \n            placeholder='Search Monster'\n            handleChange={e => this.setState({ searchField: e.target.value })} \n          />\n        {/* console.log(e.target.value) */}\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );   \n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}